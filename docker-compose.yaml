version: "3"
services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always

    command:
      - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik

      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web # <== Operate on the docker network named web

      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured

      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.mytlschallenge.acme.email=caruso33@web.de # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/certs/acme.json # <== Defining acme file to store cert information
      # during development
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`monitor.example.com`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
      - ./certs:/certs # <== Volume for certs (TLS)
      - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
      # - ./traefik.toml:/etc/traefik/traefik.toml

    networks:
      - web # <== Placing traefik on the network named web, to access containers on this network

    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"

  app:
    build:
      context: ./server
    container_name: server
    restart: always

    labels:
      - traefik.frontend.rule=HOST:server.example.com,www.example.com,example.com
      - traefik.port=3000
      - traefik.enable=true

    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.express-web.rule=Host(`example.com`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.express-web.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.express-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.express-secured.rule=Host(`example.com`)" # <== Your Domain Name for the https rule 
      - "traefik.http.routers.express-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      - "traefik.http.routers.express-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https

    volumes:
      - server/:/app/
      - /app/node_modules

    networks:
      - web

networks:
  web:
    external: true

volumes:
  server:
    external: true
